This file contains stories to be used on a Kanban board.

Kanban board procedure:
Currently the kanban is hosted via Trello (An in-house solution may be considered in the future): https://trello.com/b/lGaz9YsG/kanban

The five columns of the kanban board:
Not Ready - Blocked by the completion of existing stories.
Ready - Is not blocked, and is ready to work on.
In Progress - Is being actively worked on.
Review - Initial build is complete. Primary testing in progress.
Done -  Story is available for regression testing and should be archived.

Stories can be shared among the following components.
Design - Story creation/grooming, planning, communication.
Creative - Creation of non-programming assets such as music, textures, models, and animations.
Content - Creation of programming and creative-heavy assets such as speech trees, quests, enemies, items.
Testing - Create/execute manual test plans and automated tests.
Interface - Create user interfaces.
Network - Manage security, create external services, and manage netcode.
Core - Provide core classes and 
User experience - Assess the "fun" of existing features, propose alterations/user settings/features to make the game more balanced, cohesive, and "fun".
AI - Create and maintain any artificial intelligences.

Stories should contain three parts:
Title- name to be used on Kanban board
Components- disciplines needed to create this story
Body- a description, estimate, test plan, and any other info to copy/paste into the body of a story on a kanban.  


Title:
Components:
Body:

Title: Invisible walls in overworld
Components: Core
Body:
Invisible walls should prevent items and NPCs from leaving the rendered map.

Title: Overworld (Multiplayer)
Components: Core, Networking
Body:
Server should be responsible for feeding clients all the terrain, actor, and item data they need as they move accross the overworld.



Title: Convert extra tables to a JSON field
Components: Core
Body:
Replace the items_extra and actors_extra tables with an
additional field in items and actors to speed up saving/loading.

Title: Construct actor scene tree programmatically
Components: Core
Body:
Currently actors are created using an actor.tscn scene file, which makes customizing them sub-optimal. Construct the Actor and set up its child nodes in order to make this process automated. This way down the road, different materials/models/animations can be loaded on on the fly instead of requiring human help.

Title: Create ToJson and FromJson for ActorData and ItemData
Components: Core
Body:
Convert ItemData and ActorData to and from JSON for net code.


Title: Fix arena inventory init
Components: Core, Network
Body:
Arena currently initializes actor inventory with a delay after spawning them.
Ideally the arena should set up an ActorData pre-equipped.